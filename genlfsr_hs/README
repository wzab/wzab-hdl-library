This is a generic, parametrized implementation of the pseudorandom sequence
generator, based on linear feedback shift register, written in VHDL.
This is a behavioral code, however it also gives quite nice results in
synthesis.
The code is published as public domain, in the hope, that it may be useful
for someone...
The first version of the code was published on 20.02.2007 on the usenet alt.sources group.
See https://groups.google.com/g/alt.sources/c/Xyt2HSLcsDI 

This version uses two LFSRs shifted in opposite directions to enable producing
longer random values without performing multibit shifts in a single clock
period (which increased the complexity of the generated HW).

The values for LFSR feedback may be taken from:
https://docs.xilinx.com/v/u/en-US/xapp052

I have performed tests using the 2^30 32-samples (generated after setting:
constant width  : integer     := 32;
constant COUNT_SIZE : integer := 31;
in the genlfsr_tb.vhd in sim2 directory and running:
make ; dieharder -a -f dta_out.txt  > res.txt
in that directory)
The results are below:
#=============================================================================#
#            dieharder version 3.31.1 Copyright 2003 Robert G. Brown          #
#=============================================================================#
   rng_name    |           filename             |rands/second|
        mt19937|                     dta_out.txt|  1.44e+08  |
#=============================================================================#
        test_name   |ntup| tsamples |psamples|  p-value |Assessment
#=============================================================================#
   diehard_birthdays|   0|       100|     100|0.79423698|  PASSED  
      diehard_operm5|   0|   1000000|     100|0.81220194|  PASSED  
  diehard_rank_32x32|   0|     40000|     100|0.64703206|  PASSED  
    diehard_rank_6x8|   0|    100000|     100|0.12864238|  PASSED  
   diehard_bitstream|   0|   2097152|     100|0.07218067|  PASSED  
        diehard_opso|   0|   2097152|     100|0.01075494|  PASSED  
        diehard_oqso|   0|   2097152|     100|0.18466013|  PASSED  
         diehard_dna|   0|   2097152|     100|0.15517642|  PASSED  
diehard_count_1s_str|   0|    256000|     100|0.05638024|  PASSED  
diehard_count_1s_byt|   0|    256000|     100|0.42905526|  PASSED  
 diehard_parking_lot|   0|     12000|     100|0.00321705|   WEAK   
    diehard_2dsphere|   2|      8000|     100|0.80142511|  PASSED  
    diehard_3dsphere|   3|      4000|     100|0.44711561|  PASSED  
     diehard_squeeze|   0|    100000|     100|0.09587702|  PASSED  
        diehard_sums|   0|       100|     100|0.62405863|  PASSED  
        diehard_runs|   0|    100000|     100|0.61489708|  PASSED  
        diehard_runs|   0|    100000|     100|0.80764328|  PASSED  
       diehard_craps|   0|    200000|     100|0.75161777|  PASSED  
       diehard_craps|   0|    200000|     100|0.20911610|  PASSED  
 marsaglia_tsang_gcd|   0|  10000000|     100|0.47060053|  PASSED  
 marsaglia_tsang_gcd|   0|  10000000|     100|0.20609959|  PASSED  
         sts_monobit|   1|    100000|     100|0.53420372|  PASSED  
            sts_runs|   2|    100000|     100|0.17990450|  PASSED  
          sts_serial|   1|    100000|     100|0.73791705|  PASSED  
          sts_serial|   2|    100000|     100|0.12247401|  PASSED  
          sts_serial|   3|    100000|     100|0.19710738|  PASSED  
          sts_serial|   3|    100000|     100|0.44129279|  PASSED  
          sts_serial|   4|    100000|     100|0.88228503|  PASSED  
          sts_serial|   4|    100000|     100|0.07393201|  PASSED  
          sts_serial|   5|    100000|     100|0.18427573|  PASSED  
          sts_serial|   5|    100000|     100|0.70417113|  PASSED  
          sts_serial|   6|    100000|     100|0.61529085|  PASSED  
          sts_serial|   6|    100000|     100|0.16650379|  PASSED  
          sts_serial|   7|    100000|     100|0.85510204|  PASSED  
          sts_serial|   7|    100000|     100|0.61174921|  PASSED  
          sts_serial|   8|    100000|     100|0.03756250|  PASSED  
          sts_serial|   8|    100000|     100|0.25870650|  PASSED  
          sts_serial|   9|    100000|     100|0.01834474|  PASSED  
          sts_serial|   9|    100000|     100|0.07240214|  PASSED  
          sts_serial|  10|    100000|     100|0.22045266|  PASSED  
          sts_serial|  10|    100000|     100|0.54745722|  PASSED  
          sts_serial|  11|    100000|     100|0.73267562|  PASSED  
          sts_serial|  11|    100000|     100|0.07040531|  PASSED  
          sts_serial|  12|    100000|     100|0.94639791|  PASSED  
          sts_serial|  12|    100000|     100|0.37383321|  PASSED  
          sts_serial|  13|    100000|     100|0.56981719|  PASSED  
          sts_serial|  13|    100000|     100|0.97175046|  PASSED  
          sts_serial|  14|    100000|     100|0.54222883|  PASSED  
          sts_serial|  14|    100000|     100|0.06673539|  PASSED  
          sts_serial|  15|    100000|     100|0.19041389|  PASSED  
          sts_serial|  15|    100000|     100|0.27402889|  PASSED  
          sts_serial|  16|    100000|     100|0.28232747|  PASSED  
          sts_serial|  16|    100000|     100|0.79827662|  PASSED  
         rgb_bitdist|   1|    100000|     100|0.70069203|  PASSED  
         rgb_bitdist|   2|    100000|     100|0.98101295|  PASSED  
         rgb_bitdist|   3|    100000|     100|0.40181433|  PASSED  
         rgb_bitdist|   4|    100000|     100|0.43258219|  PASSED  
         rgb_bitdist|   5|    100000|     100|0.97110992|  PASSED  
         rgb_bitdist|   6|    100000|     100|0.98837846|  PASSED  
         rgb_bitdist|   7|    100000|     100|0.13211563|  PASSED  
         rgb_bitdist|   8|    100000|     100|0.96617949|  PASSED  
         rgb_bitdist|   9|    100000|     100|0.29728619|  PASSED  
         rgb_bitdist|  10|    100000|     100|0.20909527|  PASSED  
         rgb_bitdist|  11|    100000|     100|0.41453550|  PASSED  
         rgb_bitdist|  12|    100000|     100|0.83892673|  PASSED  
rgb_minimum_distance|   2|     10000|    1000|0.61176389|  PASSED  
rgb_minimum_distance|   3|     10000|    1000|0.35796137|  PASSED  
rgb_minimum_distance|   4|     10000|    1000|0.27949901|  PASSED  
rgb_minimum_distance|   5|     10000|    1000|0.70518261|  PASSED  
    rgb_permutations|   2|    100000|     100|0.63255625|  PASSED  
    rgb_permutations|   3|    100000|     100|0.52603532|  PASSED  
    rgb_permutations|   4|    100000|     100|0.50257204|  PASSED  
    rgb_permutations|   5|    100000|     100|0.08313761|  PASSED  
      rgb_lagged_sum|   0|   1000000|     100|0.24340793|  PASSED  
      rgb_lagged_sum|   1|   1000000|     100|0.14949683|  PASSED  
      rgb_lagged_sum|   2|   1000000|     100|0.85741974|  PASSED  
      rgb_lagged_sum|   3|   1000000|     100|0.63133739|  PASSED  
      rgb_lagged_sum|   4|   1000000|     100|0.51694820|  PASSED  
      rgb_lagged_sum|   5|   1000000|     100|0.58665808|  PASSED  
      rgb_lagged_sum|   6|   1000000|     100|0.29739137|  PASSED  
      rgb_lagged_sum|   7|   1000000|     100|0.38949563|  PASSED  
      rgb_lagged_sum|   8|   1000000|     100|0.17107200|  PASSED  
      rgb_lagged_sum|   9|   1000000|     100|0.96829539|  PASSED  
      rgb_lagged_sum|  10|   1000000|     100|0.57997083|  PASSED  
      rgb_lagged_sum|  11|   1000000|     100|0.49483950|  PASSED  
      rgb_lagged_sum|  12|   1000000|     100|0.67501173|  PASSED  
      rgb_lagged_sum|  13|   1000000|     100|0.96914879|  PASSED  
      rgb_lagged_sum|  14|   1000000|     100|0.35567994|  PASSED  
      rgb_lagged_sum|  15|   1000000|     100|0.62897993|  PASSED  
      rgb_lagged_sum|  16|   1000000|     100|0.73172604|  PASSED  
      rgb_lagged_sum|  17|   1000000|     100|0.98131221|  PASSED  
      rgb_lagged_sum|  18|   1000000|     100|0.21689322|  PASSED  
      rgb_lagged_sum|  19|   1000000|     100|0.13018396|  PASSED  
      rgb_lagged_sum|  20|   1000000|     100|0.62073192|  PASSED  
      rgb_lagged_sum|  21|   1000000|     100|0.23584374|  PASSED  
      rgb_lagged_sum|  22|   1000000|     100|0.00210306|   WEAK   
      rgb_lagged_sum|  23|   1000000|     100|0.48975879|  PASSED  
      rgb_lagged_sum|  24|   1000000|     100|0.62156226|  PASSED  
      rgb_lagged_sum|  25|   1000000|     100|0.42019730|  PASSED  
      rgb_lagged_sum|  26|   1000000|     100|0.63210481|  PASSED  
      rgb_lagged_sum|  27|   1000000|     100|0.64824399|  PASSED  
      rgb_lagged_sum|  28|   1000000|     100|0.67959212|  PASSED  
      rgb_lagged_sum|  29|   1000000|     100|0.31987333|  PASSED  
      rgb_lagged_sum|  30|   1000000|     100|0.18407073|  PASSED  
      rgb_lagged_sum|  31|   1000000|     100|0.54854234|  PASSED  
      rgb_lagged_sum|  32|   1000000|     100|0.70079810|  PASSED  
     rgb_kstest_test|   0|     10000|    1000|0.28388529|  PASSED  
     dab_bytedistrib|   0|  51200000|       1|0.70281796|  PASSED  
             dab_dct| 256|     50000|       1|0.89300155|  PASSED  
Preparing to run test 207.  ntuple = 0
        dab_filltree|  32|  15000000|       1|0.34382769|  PASSED  
        dab_filltree|  32|  15000000|       1|0.37584375|  PASSED  
Preparing to run test 208.  ntuple = 0
       dab_filltree2|   0|   5000000|       1|0.55713404|  PASSED  
       dab_filltree2|   1|   5000000|       1|0.24428391|  PASSED  
Preparing to run test 209.  ntuple = 0
        dab_monobit2|  12|  65000000|       1|0.45688415|  PASSED 
=================================================================

So such generator is maybe not cryptographically safe, but as a source
of data for Monte-Carlo simulations, should be sufficient.

When selecting lengths for both LFSRs it is good to select them so 
that they are relatively primes. It can be easily checked in Python:

for 167 and 125 they are:
>>> import math
>>> p1=(1<<167)-1
>>> p2=(1<<125)-1
>>> math.gcd(p1,p2)
1

but e.g., for 165 and 125 they are not:
>>> import math
>>> p1=(1<<165)-1
>>> p2=(1<<125)-1
>>> math.gcd(p1,p2)
31

